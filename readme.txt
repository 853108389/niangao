我是readme
common
    -aspect(切面,将对方法植入的代码进行抽象,减少耦合,以后切面变多了,可以继续抽象)
        -MyAspect.java 切面的抽象类
        -MyAspectFactory.java 切面类工厂
        -ControllerAspect.java 核心切面类,用于Controller
    -bean(实体)
        -Info.java 扫描时,封装扫描类的信息
        -LocalParams.java 封装方法参数信息
    -myAdapter(适配器,适配ASM,用于扫描类信息)
        -ControllerAdapter.java 类适配置器,用于对@Controller注解的类进行扫描
        -ControllerClassAnoAdapter.java 类注解适配器
        -ControllerMethodAdapter.java  方法适配器
        -ControllerMethodAnoAdapter.java 方法注解适配器
        -ControllerParamsAnoAdapter.java 参数注解适配器
        -InterceptorAdapter.java TODO:拦截器适配器
        -InterceptorMethodAdapter.java TODO:拦截器方法适配器
    -utils(工具)
        -ClassTools.java 用于扫描指定包里的类(开发时使用,代理情况下,扫描每个类无需我们关心)
        -ControllerScanner 对类进行扫描并进行字节码增强的入口Api
    -weaving(植入)
        -beans(实体)
            -AnnEntity.java  如@RequestMapping(value = "testMethod2", method = {RequestMethod.GET, RequestMethod.DELETE})
            -AnnEntry.java   如 value = "testMethod2" 或 method = {RequestMethod.GET, RequestMethod.DELETE}
            -EnumEntry.java  如 RequestMethod.GET和 RequestMethod.DELETE    用于封装注解信息.
        -interceptor(拦截器)
            -UploadInterceptor.java TODO:植入的拦截器类
        -utils(工具类)
            -WeavingUtils.java 被植入的方法,以及从从被构造上传参数到上传之间的全过程
    -Config.java 读取配置文件,并加载其中参数到配置中.
